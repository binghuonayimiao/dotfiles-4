#!/usr/bin/env bash
set -eu
[ -n "${DEBUG:-}" ] && set -x
# ============================================================================= #
#  ➜ ➜ ➜ TRAP
# ============================================================================= #
trap 'exit' SIGINT SIGQUIT SIGTSTP

#DOSYNCV="0.1"
DOTFILES=".dotfiles"
SYNCFILE="$HOME/$DOTFILES/syncrc"
GITOPT="-q"
GITSUB="--quiet"
GITSUBOPT="--quiet"
INSTALL_FONTS="${INSTALL_FONTS:-no}"
INSTALL_DEPS="${INSTALL_DEPS:-no}"
INSTALL_NERD="${INSTALL_NERD:-no}"
NOTTY="${NOTTY:-no}"
HELP="${HELP:-no}"

if [ ! -z "$TERM" ]; then
    export TERM="xterm-256color"
fi

die() {
    echo "$@" >&2
    exit 1
}

has_terminal() {
    [ -t 0 ]
}

is_tty() {
    has_terminal
}

is_piped() {
    ! [ -t 1 ]
}

isgitlayout() {
    if [[ ! -d .git ]]; then
        echo "Not a git repository"
        exit 1
    fi
}

initlocal() {
    cd "$HOME/$DOTFILES"
    isgitlayout
    # init the main repo
    git submodule $GITSUB update --init --recursive
    cd
}

getgitorigin() {
    cd "$HOME/$DOTFILES"
    if [[ -d .git ]]; then
        ORIGIN=$(git config -l | grep remote.origin.url | awk -F'=' '{print $2}')
    fi
    cd
}

checkin() {
    gitcommit && gitpush
}

gitpull() {
    getgitorigin
    cd "$HOME/$DOTFILES"
    isgitlayout
    echo "Pulling latest changes from $ORIGIN"
    git pull $GITOPT
    echo "Pulling latest changes for submodules"
    # Required if a submodule origin changed
    git submodule $GITSUBOPT sync
    git submodule $GITSUBOPT foreach --recursive git fetch
    git submodule $GITSUBOPT update --init --recursive
    cd
}

gitcommit() {
    getgitorigin
    cd "$HOME/$DOTFILES"
    echo "Commiting latest changes to the repository"
    git commit -a $GITOPT
    cd
}

gitpush() {
    getgitorigin
    cd "$HOME/$DOTFILES"
    echo "Pushing changes upstream to $ORIGIN" &&
        git push $GITOPT
    cd
}

if [ -d "$HOME/$DOTFILES" ]; then
    cd "$HOME/$DOTFILES" || exit 1
    isgitlayout
else
    git clone $GITOPT "$ORIGIN" "$HOME/$DOTFILES"
fi
source "$HOME/$DOTFILES/lib/utilities.sh"
source "$HOME/$DOTFILES/lib/installer.sh"

NEVER_ROOT
# ============================================================================= #

# ============================================================================= #
removebrokenlinks() {
    find $HOME -maxdepth 1 -name ".*" -type l | while read f; do if [ ! -e "$f" ]; then rm -f "$f"; fi; done
}

sync_options() {
    # Skip setup if the user wants or stdin is closed (not running interactively).
    if [ $NOTTY = yes ]; then
        export overwrite_all='false' backup_all='true' skip_all='false'
    else
        export overwrite_all='false' backup_all='false' skip_all='false'
    fi

    if [ $INSTALL_FONTS = yes ]; then

        NOTIFY "Installing fonts"
        mkdir -p ~/.local/share/fonts
        cd ~/.local/share/fonts
        git clone https://github.com/powerline/fonts.git --depth=1
        cd fonts || return
        ./install.sh
        cd .. || return
        rm -rf fonts
        exit 0
    fi
    if [ $INSTALL_NERD = yes ]; then

        NOTIFY "Installing fonts"
        mkdir -p ~/.local/share/fonts
        cd ~/.local/share/fonts
        git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git && cd nerd-fonts
        #wget https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/install.sh &&
        chmod +x install.sh && ./install.sh
        exit 0
    fi
    if [ $HELP = yes ]; then
        echo "Usage:"
        exit 0
    fi
}
installer_config() {
    if [ $INSTALL_DEPS = yes ]; then
        case $OS in
        'Arch')
            UPDATE
            INSTALL "curl wget ruby python chromaprint grc lsb-release"
            ;;
        'Ubuntu')
            UPDATE
            INSTALL "curl wget ruby python chroma grc lsb-release"
            ;;
        'Debian')
            UPDATE
            INSTALL "curl wget ruby python chroma grc lsb-release"
            ;;
        'Armbian')
            UPDATE
            INSTALL "curl wget ruby python chroma grc lsb-release"
            ;;
        'Raspbian')
            UPDATE
            INSTALL "curl wget ruby python chroma grc lsb-release"
            ;;
        esac
        exit 0
    fi
    #    # If this user's login shell is already "zsh", do not attempt to switch.
    #    if [ "$(basename -- "$SHELL")" = "zsh" ]; then
    #        return
    #    fi
}

sync_config() {
    if [[ ! -s $SYNCFILE ]]; then
        if [[ -s $HOME/$DOTFILES/syncrc ]]; then
            SYNCFILE="$HOME/$DOTFILES/syncrc"
        else
            echo "File syncrc doesnt exist, exiting"
            exit 1
        fi
    fi
}

files_list() {
    SRCFILES="$(sed -n '/\[files\]/,/\[endfiles\]/p' $SYNCFILE | grep -v '^\[.*files]' | grep -v ^#)"
    if [[ -z "$SRCFILES" ]]; then
        echo "Specify files to sync in syncrc file"
        exit 1
    fi
}

get_file() {
    srcfile="$(echo $file | awk -F: '{print $1}')"
    dstfile="$(echo $file | awk -F: '{print $2}')"
    dotsrc="$HOME/$DOTFILES/$srcfile"

    if [[ $dstfile = "" ]]; then
        dstfile=".$(basename "$srcfile")"
    fi
    dotfile="$HOME/$dstfile"
}
run_install() {
    # Run as unattended if stdin is not a tty
    if ! is_tty; then
        NOTTY=yes
    fi

    while [ $# -gt 0 ]; do
        case $1 in
        -unattended) NOTTY=yes ;;
        -powerline-fonts) INSTALL_FONTS=yes ;;
        -nerd-complete) INSTALL_NERD=yes ;;
        -deps) INSTALL_DEPS=yes ;;
        -h | --help) HELP=yes ;;
        -u | --pull)
            gitpull
            exit 0
            ;;
        -c | --commit)
            gitcommit
            exit 0
            ;;
        -p | --push)
            gitpush
            exit 0
            ;;
        -cc | --check)
            checkin
            exit 0
            ;;
        esac
        shift
    done
    removebrokenlinks
    sync_options "$@"
    installer_config "$@"
    sync_config "$@"
    files_list "$@"

    for file in $SRCFILES; do
        get_file "$file"
        SYMLINK "$dotsrc" "$dotfile"
    done
    exit 0
}
while true; do
    run_install "$@"
done
